syntax = "proto3";
package userpackage;

message PublicKey {
    uint64 key_type = 1;
    bytes  key      = 2;
}

message Process {
    bytes process = 1;
}

message Index {
    uint64 index_type    = 1;
    uint64 logical_clock = 2;
}

message Indices {
    repeated Index indices = 1;
}

message VectorClock {
    repeated uint64 logical_clocks = 1;
}

message SignedEvent {
    bytes signature = 1;
    bytes event     = 2;
}

message LWWElementSet {
    enum Operation {
        ADD    = 0;
        REMOVE = 1;
    }
    Operation operation         = 1;
    bytes     value             = 2;
    uint64    unix_milliseconds = 3;
}

message LWWElement {
    bytes  value             = 1;
    uint64 unix_milliseconds = 2;
}

message Server {
    string server = 1;
}

message BlobMeta {
    uint64 section_count = 1;
    string mime = 2;
}

message BlobSection {
    uint64 meta_pointer = 1;
    bytes content = 2;
}

message Event {
             PublicKey     system            = 1;
             Process       process           = 2;
             uint64        logical_clock     = 3;
             uint64        content_type      = 4;
             bytes         content           = 5;
             VectorClock   vector_clock      = 6;
             Indices       indices           = 7;
    optional LWWElementSet lww_element_set   = 8;
    optional LWWElement    lww_element       = 9;
    repeated Reference     references        = 10;
    optional uint64        unix_milliseconds = 11;
}

message Digest {
    uint64 digest_type = 1;
    bytes  digest      = 2;
}

message Pointer {
    PublicKey system        = 1;
    Process   process       = 2;
    uint64    logical_clock = 3;
    Digest    event_digest  = 4;
}

message Delete {
    Process process       = 1;
    uint64  logical_clock = 2;
    Indices indices       = 3;
}

message Events {
    repeated SignedEvent events = 1;
}

message Range {
    uint64 low  = 1;
    uint64 high = 2;
}

message RangesForProcess {
             Process process = 1;
    repeated Range   ranges  = 2;
}

message RangesForSystem {
    repeated RangesForProcess ranges_for_processes = 1;
}

message PrivateKey {
    uint64 key_type = 1;
    bytes  key      = 2;
}

message KeyPair {
    uint64 key_type    = 1;
    bytes  private_key = 2;
    bytes  public_key  = 3;
}

message ExportBundle {
    KeyPair key_pair = 1;
    Events  events   = 2;
}

message ResultEventsAndRelatedEventsAndCursor {
    Events          result_events  = 1;
    Events          related_events = 2;
    optional bytes  cursor         = 3;
}

message Reference {
    uint64 reference_type = 1;
    bytes  reference      = 2;
}

message Post {
    optional string  content = 1;
    optional Pointer image   = 2;
}

message Claim {
    string claim_type = 1;
    bytes  claim      = 2;
}

message ClaimIdentifier {
    string identifier = 1;
}

message ClaimOccupation {
    string organization = 1;
    string role         = 2;
    string location     = 3;
}

message Vouch {}

message StorageTypeProcessSecret {
    PrivateKey system  = 1;
    Process    process = 2;
}

message StorageTypeProcessState {
             uint64  logical_clock = 1;
    repeated Range   ranges        = 2;
             Indices indices       = 3;
}

message StorageTypeCRDTSetItem {
    uint64                  content_type      = 1;
    bytes                   value             = 2;
    uint64                  unix_milliseconds = 3;
    LWWElementSet.Operation operation         = 4;
}

message StorageTypeCRDTItem {
    uint64 content_type      = 1;
    bytes  value             = 2;
    uint64 unix_milliseconds = 3;
}

message StorageTypeSystemState {
    repeated StorageTypeCRDTSetItem crdt_set_items = 1;
    repeated Process                processes      = 2;
    repeated StorageTypeCRDTItem    crdt_items     = 3;
}

message StorageTypeEvent {
    optional SignedEvent event            = 1;
    optional Pointer     mutation_pointer = 2;
}

message RepeatedUInt64 {
    repeated uint64 numbers = 1;
}

message CountLWWElementReferences {
             bytes  value     = 1;
    optional uint64 from_type = 2;
}

message CountReferences {
    optional uint64 from_type = 1;
}

message QueryReferencesRequest {
             Reference                 reference                    = 1;
    optional bytes                     cursor                       = 2;
    optional uint64                    from_type                    = 3;
    repeated CountLWWElementReferences count_lww_element_references = 4;
    repeated CountReferences           count_references             = 5;
}

message QueryReferencesResponseItem {
             SignedEvent event  = 1;
    repeated uint64      counts = 2;
}

message QueryReferencesResponse {
    repeated QueryReferencesResponseItem items          = 1;
    repeated SignedEvent                 related_events = 2;
    optional bytes                       cursor         = 3;
}

message URLInfo {
    // url_type 1 = URLInfoSystemLink
    // url_type 2 = URLInfoEventLink
    // url_type 3 = ExportBundle
    uint64 url_type = 1;
    bytes  body     = 2;
}

message URLInfoSystemLink {
             PublicKey system  = 1;
    repeated string    servers = 2;
}

message URLInfoEventLink {
             PublicKey system        = 1;
             Process   process       = 2;
             uint64    logical_clock = 3;
    repeated string    servers       = 4;
}
